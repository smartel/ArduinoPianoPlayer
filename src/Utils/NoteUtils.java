package Utils;

public class NoteUtils {

	
	public NoteUtils() {
	}
	
	/**
	 * Generates a numeric value that represents the key's position on the piano, as well as making it intuitively comparable to other keys on the piano.
	 * Each white note is a whole value step (1), and half values are half-steps (sharps / flats)
	 * To show how it is intuitive - this means that "C" would be 2 steps away from "E" (C to D, then D to E, or alternatively, E to D, and then D to C)
	 *
	 * To generate this number, 2 values are added together:
	 * 	Value 1: generated by mapping notes to their integer position within an octave, and adding or subtracting 0.5 for sharps / flats.
	 *  	A=1,B=2,...,G=7    A flat = 0.5, A sharp = 1.5 == B flat = 1.5 ...  G flat = 6.5, G sharp = 7.5
	 * 	Value 2: generated via ((n-1)*7), where n is the octave the key is in. 1 is subtracted from n, so that the first value, "A" of octave 1, returns 1, "B" of octave 1 returns 2, and so on.
	 * By adding values 1 and 2 together, we can compare notes on a keyboard.
	 * For example, a 2nd octave "D" generates the value: 4 + (7*1) = 11
	 *              a 3rd octave "A" generates the value: 1 + (7*2) = 15
	 * If these 2 values are compared together,
	 *  it is shown that a 2nd octave "D" is a lower note than a 3rd octave "A",
	 *  and it is possible to get the key distance between them with simple subtraction.
	 *		15 - 11 == absolute value of 11 - 15 = distance of 4 keys (it takes 4 moves to get from that D key to that A key, or from that A key to get to that D key)
	 * Lastly, an A-flat on one octave can be shown to be equivalent to a G-sharp on the previous octave.
	 * 	 A-flat on octave 3 = 1(for A) - 0.5(for flat) + ((3-1)*7) = 0.5 + 14 = 14.5
	 *   G-sharp on octave 2 = 7(for G) + 0.5(for sharp) + ((2-1)*7) = 7.5 + 7 = 14.5
	 */
	public double generateCompareValue(String note, int octave, boolean isSharp, boolean isFlat) {

		double value = 0;

		// individual note lookup
		
		if (note == Constants.A_NOTE) {
			value += Constants.A_POS;
		} else if (note == Constants.B_NOTE) {
			value += Constants.B_POS;
		} else if (note == Constants.C_NOTE) {
			value += Constants.C_POS;
		} else if (note == Constants.D_NOTE) {
			value += Constants.D_POS;
		} else if (note == Constants.E_NOTE) {
			value += Constants.E_POS;
		} else if (note == Constants.F_NOTE) {
			value += Constants.F_POS;
		} else if (note == Constants.G_NOTE) {
			value += Constants.G_POS;
		}
		
		// note modifications via half-steps
		
		if (isSharp) {
			value += Constants.SHARP_CHANGE;
		} else if (isFlat) {
			value += Constants.FLAT_CHANGE;
		}
		
		// octave adjustment
		value += ((octave - 1) * Constants.OCTAVE_LENGTH);
		
		// TODO all error handling should've been done in the MusicNote constructor, and I'm not sure anything else would call this method...
		// but should we do any error checking here just to be safe? Perhaps move that error checking / exception throwing here instead, so it's not duplicated in 2 places?
		
		return value;
	}
	
	
	
	
}
